#include "../../lighting_common.fxsub"

#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/Layer.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/BRDF.fxsub"

#if SHADOW_MAP_FROM >= 1
#	include "../../../shader/ShadowMapCascaded.fxsub"
#	include "../../../shader/CascadeShadow.fxsub"
#endif

float mR : CONTROLOBJECT<string name = "(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name = "(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name = "(self)"; string item = "B+";>;
float mBlink : CONTROLOBJECT<string name = "(self)"; string item = "Blink";>;
float mIntensityP : CONTROLOBJECT<string name = "(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name = "(self)"; string item = "Intensity-";>;
float mMultiLightP : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight-";>;

float3 mPosition : CONTROLOBJECT<string name = "(self)"; string item = "Position";>;
float3 mDirection : CONTROLOBJECT<string name = "(self)"; string item = "Direction";>;

static const float LightBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float LightIntensity = lerp(lerp(lightIntensityLimits.x, lightIntensityLimits.y, mIntensityP), 0, mIntensityM);
static const float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);

static const float3 LightPosition = mPosition;
static const float3 LightDirection = normalize(mDirection - mPosition);
static const float3 LightColor = float3(mR, mG, mB) * LightIntensity * LightIntensity2 * LightBlink;

static const float3 viewLightDirection = normalize(mul(-LightDirection, (float3x3)matView));

#if SHADOW_MAP_FROM >= 1
#if SHADOW_QUALITY == 1
#	define SHADOW_MAP_SIZE 1024
#elif SHADOW_QUALITY == 2
#	define SHADOW_MAP_SIZE 2048
#elif SHADOW_QUALITY == 3
#	define SHADOW_MAP_SIZE 4096
#elif SHADOW_QUALITY == 4
#	define SHADOW_MAP_SIZE 8192
#else
#	define SHADOW_MAP_SIZE 2048
#endif

texture CSM : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../CSM.fx;"
		"*.pmd = ../CSM.fx;"
		"* = hide";
>;
texture CSM1 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../CSM1.fx;"
		"*.pmd = ../CSM1.fx;"
		"* = hide";
>;
texture CSM2 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../CSM2.fx;"
		"*.pmd = ../CSM2.fx;"
		"* = hide";
>;
texture CSM3 : OFFSCREENRENDERTARGET<
	string Description = "Shadow Rendering for DirectionalLight";
	int2 Dimensions = {SHADOW_MAP_SIZE, SHADOW_MAP_SIZE};
	string Format = "G32R32F";
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../CSM3.fx;"
		"*.pmd = ../CSM3.fx;"
		"* = hide";
>;
sampler CSMSamp = sampler_state { texture = <CSM>; MinFilter = POINT; MagFilter = POINT; MipFilter = NONE; AddressU = CLAMP; AddressV = CLAMP; };
sampler CSM1Samp = sampler_state { texture = <CSM1>; MinFilter = POINT; MagFilter = POINT; MipFilter = NONE; AddressU = CLAMP; AddressV = CLAMP; };
sampler CSM2Samp = sampler_state { texture = <CSM2>; MinFilter = POINT; MagFilter = POINT; MipFilter = NONE; AddressU = CLAMP; AddressV = CLAMP; };
sampler CSM3Samp = sampler_state { texture = <CSM3>; MinFilter = POINT; MagFilter = POINT; MipFilter = NONE; AddressU = CLAMP; AddressV = CLAMP; };

static float4 frustumInfo = CreateFrustumFromProjInverse();
static FrustumClipPlanes planes = CreateFrustumClipPlanes(mCascadeShadowZNear, mCascadeShadowZFar, mCascadeShadowLambda);

float SampleCompare(sampler source, float2 shadowCoord, float depth)
{
	float s = tex2Dlod(source, float4(shadowCoord, 0, 0)).r;
	return s < 1e-5 ? 1 : (s > depth ? 1 : 0);
}

float SampleShadowmapFiltered(sampler source, float2 shadowCoord, float depth, float4 shadowmapSize)
{
	float4 attenuation4;
	float invShadowAtlasWidth = shadowmapSize.x;
	float invShadowAtlasHeight = shadowmapSize.y;
	float invHalfShadowAtlasWidth = 0.5f * invShadowAtlasWidth;
    float invHalfShadowAtlasHeight = 0.5f * invShadowAtlasHeight;
	float2 offset = float2(invHalfShadowAtlasWidth, invHalfShadowAtlasHeight);
    attenuation4.x = SampleCompare(source, shadowCoord.xy + offset * float2(-1, -1), depth);
    attenuation4.y = SampleCompare(source, shadowCoord.xy + offset * float2(+1, -1), depth);
    attenuation4.z = SampleCompare(source, shadowCoord.xy + offset * float2(-1, +1), depth);
    attenuation4.w = SampleCompare(source, shadowCoord.xy + offset * float2(+1, +1), depth);
    float attenuation = dot(attenuation4, 0.25);

	return attenuation;
}

float ShadingShadow(MaterialParam material, float3 viewPosition)
{
	float shadow = 1;

	float3 positionWS = mul(float4(viewPosition, 1), matViewInverse).xyz;

	int layer = -1;
	float4x4 vmat = 0;
	float4x4 pmat = 0;
	[unroll]
	for (int i = 0; i < 4; i++) {
		float znear = planes.znears[i];
		float zfar = planes.zfars[i];
		FrustumData frustum = CreateFrustumData(znear, zfar, frustumInfo);

		float3 nc = (frustum.rtn + frustum.lbn) / 2.0;
		float3 fc = (frustum.rtf + frustum.lbf) / 2.0;

		float3 axis = fc - nc;
		float3 v0 = nc - frustum.rtf;
		float3 v1 = nc - frustum.rtn;
		float t = (dot(v0, v0) - dot(v1, v1)) / (2 * dot(axis, frustum.rtf - frustum.rtn));

		float3 center = nc + t * axis;

		float cz = center.z;

		float radius = length(frustum.rbn - center);

		center = mul(float4(center, 1), matViewInverse).xyz;

		if (length2(positionWS - center) <= radius * radius) 
		{
			layer = i;
			float3 lightDirectionWS = -LightDirection;
			vmat = CreateLightViewMatrixWithCenter(LightDirection, lightDirectionWS, radius + mCascadeShadowZNear, center);
    		pmat = CreateOrthographicMatrix(-radius, radius, -radius, radius, mCascadeShadowZNear, mCascadeShadowZNear + 2 * radius);
			break;
		}
	}

	float depth = 0;
	if (layer >= 0) {
		float3 positionVS = mul(float4(positionWS, 1), vmat).xyz;
		float4 positionCS = mul(float4(positionVS, 1), pmat);

		depth = positionVS.z;
		float2 ndcCoord = positionCS.xy / positionCS.w;
		ndcCoord = PosToCoord(ndcCoord.xy);
		ndcCoord.xy += 0.5 / float(SHADOW_MAP_SIZE);

		float4 shadowmapSize = float4((1.0 / SHADOW_MAP_SIZE).xx, (SHADOW_MAP_SIZE * 1.0).xx);
		float sam = 1;
		if (layer == 0)
		{
			clip(tex2Dlod(CSMSamp, float4(ndcCoord, 0, 0)).r - 1e-5);
			sam = SampleShadowmapFiltered(CSMSamp, ndcCoord, depth, shadowmapSize);
		}
		else if (layer == 1)
		{
			clip(tex2Dlod(CSM1Samp, float4(ndcCoord, 0, 0)).r - 1e-5);
			sam = SampleShadowmapFiltered(CSM1Samp, ndcCoord, depth, shadowmapSize);
		}
		else if (layer == 2)
		{
			clip(tex2Dlod(CSM2Samp, float4(ndcCoord, 0, 0)).r - 1e-5);
			sam = SampleShadowmapFiltered(CSM2Samp, ndcCoord, depth, shadowmapSize);
		}
		else
		{
			clip(tex2Dlod(CSM3Samp, float4(ndcCoord, 0, 0)).r - 1e-5);
			sam = SampleShadowmapFiltered(CSM3Samp, ndcCoord, depth, shadowmapSize);
		}
		shadow = sam;
	}

	return shadow;
}
#endif

void ShadingMaterial(MaterialParam material, float3 P, float3 V, float shadow, inout float3 diffuse, inout float3 specular)
{
	float3 L = viewLightDirection;

	float2x3 energy = SurfaceEnergy(material, material.normal, L, V, shadow);
	diffuse = energy[0] + SubsurfaceShading(material, material.normal, L, V);
	diffuse *= LightColor;

#if LIGHT_PARAMS_TYPE == 0 || LIGHT_PARAMS_TYPE == 2
	specular = energy[1];
	specular *= LightColor;
#endif
}

void GetGbufferParams(float4 texcoord, out MaterialParam material, out MaterialParam materialAlpha)
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
}

void UseLayer(float4 texcoord, inout float3 diffuse, inout float3 specular, inout float3 diffuseAlpha, inout float3 specularAlpha)
{
	float2 coord = texcoord.xy / texcoord.w;
	float mul = calculateLayer(LayerSamp, coord, mLayers);
	diffuse *= mul;
	specular *= mul;
	diffuseAlpha *= mul;
	specularAlpha *= mul;
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	Position.xyz = LightPosition + Normal * 2000;
	oTexcoord1 = -mul(Position, matView);
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
}

void LightSourcePS(
	float4 coord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(coord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float shadow = 1;
#if SHADOW_MAP_FROM >= 1
	shadow = ShadingShadow(materialAlpha, P2);
	clip(shadow - 1e-5);
#endif

	float3 diffuse = 0, specular = 0;
	float3 diffuseAlpha = 0, specularAlpha = 0;

	ShadingMaterial(material, P1, V, shadow, diffuse, specular);
	ShadingMaterial(materialAlpha, P2, V, shadow, diffuseAlpha, specularAlpha);

	UseLayer(coord, diffuse, specular, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

void LightSourceShadowlessPS(
	float4 coord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(coord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse = 0, specular = 0;
	float3 diffuseAlpha = 0, specularAlpha = 0;

	ShadingMaterial(material, P1, V, 1, diffuse, specular);
	ShadingMaterial(materialAlpha, P2, V, 1, diffuseAlpha, specularAlpha);

	UseLayer(coord, diffuse, specular, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTecBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}