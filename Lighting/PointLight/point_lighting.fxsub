#include "../../lighting_common.fxsub"

#include "../../../ray.conf"
#include "../../../ray_advanced.conf"
#include "../../../shader/math.fxsub"
#include "../../../shader/Layer.fxsub"
#include "../../../shader/common.fxsub"
#include "../../../shader/gbuffer.fxsub"
#include "../../../shader/gbuffer_sampler.fxsub"
#include "../../../shader/BRDF.fxsub"
#include "../../../shader/arealight.fxsub"

#if SHADOW_MAP_FROM > 0
#	include "../../../shader/shadowcommon.fxsub"
#endif

float mR : CONTROLOBJECT<string name = "(self)"; string item = "R+";>;
float mG : CONTROLOBJECT<string name = "(self)"; string item = "G+";>;
float mB : CONTROLOBJECT<string name = "(self)"; string item = "B+";>;
float mBlink : CONTROLOBJECT<string name = "(self)"; string item = "Blink";>;
float mRangeP : CONTROLOBJECT<string name = "(self)"; string item = "Range+";>;
float mRangeM : CONTROLOBJECT<string name = "(self)"; string item = "Range-";>;
float mHardnessP : CONTROLOBJECT<string name = "(self)"; string item = "Hardness";>;
float mIntensityP : CONTROLOBJECT<string name = "(self)"; string item = "Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name = "(self)"; string item = "Intensity-";>;
float mAttenuationBulbP : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb+";>;
float mAttenuationBulbM : CONTROLOBJECT<string name = "(self)"; string item = "AttenuationBulb-";>;
float mMultiLightP : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight+";>;
float mMultiLightM : CONTROLOBJECT<string name = "ray_controller.pmx"; string item = "MultiLight-";>;

float3 mPosition : CONTROLOBJECT<string name = "(self)"; string item = "Position";>;

static const float LightHardness = lerp(shadowHardness.x, shadowHardness.y, mHardnessP);
static const float LightBlink = saturate(1 - SmoothTriangleWave(time * mBlink * 10));
static const float LightRange = lerp(lerp(lightRangeParams.x, lightRangeParams.z, mRangeP), lightRangeParams.y, mRangeM);
static const float LightAttenuationBulb = lerp(lerp(lightAttenuationBulbParams.x, lightAttenuationBulbParams.z, mAttenuationBulbP), lightAttenuationBulbParams.y, mAttenuationBulbM);
static const float LightIntensity = lerp(lerp(lightIntensityParams.x, lightIntensityParams.z, mIntensityP), lightIntensityParams.y, mIntensityM);
static const float LightIntensity2 = lerp(lerp(mLightIntensityMin, mLightIntensityMax, mMultiLightP), 0, mMultiLightM);

static const float3 LightPosition = mPosition;
static const float3 LightColor = float3(mR, mG, mB) * LightIntensity * LightIntensity2 * LightBlink;

static const float3 viewLightPosition = mul(float4(LightPosition, 1), matView).xyz;

#if SHADOW_MAP_FROM > 0
#if SHADOW_MAP_QUALITY == 0
#   define SHADOW_MAP_WIDTH 256
#   define SHADOW_MAP_HEIGHT 384
#elif SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_WIDTH 512
#   define SHADOW_MAP_HEIGHT 768
#elif SHADOW_MAP_QUALITY >= 2
#   define SHADOW_MAP_WIDTH 1024
#   define SHADOW_MAP_HEIGHT 1536
#elif SHADOW_MAP_QUALITY >= 3
#   define SHADOW_MAP_WIDTH 2048
#   define SHADOW_MAP_HEIGHT 3072
#else
#   define SHADOW_MAP_WIDTH 256
#   define SHADOW_MAP_HEIGHT 384
#endif

texture ShadowMap: OFFSCREENRENDERTARGET <
	string Description = "Shadow Rendering for PointLight";
	int2 Dimensions = {SHADOW_MAP_WIDTH, SHADOW_MAP_HEIGHT};
	string Format = "G32R32F";
	float4 ClearColor = { 1, 1, 1, 1 };
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"*fog.pmx=hide;"
		"*controller.pmx=hide;"
		"*editor*.pmx=hide;"
		"*.pmx = ../point_shadow.fx;"
		"*.pmd = ../point_shadow.fx;"
		"* = hide";
>;
sampler ShadowMapSamp = sampler_state {
	texture = <ShadowMap>;
	MinFilter = POINT;	MagFilter = LINEAR;	MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

static float2 ShadowMapOffset  = 0.5 / float2(SHADOW_MAP_WIDTH, SHADOW_MAP_HEIGHT);
static float2 ShadowMapOffset2 = 1.0 / float2(SHADOW_MAP_WIDTH, SHADOW_MAP_HEIGHT);

float4x4 CreateLightViewMatrix(float3 forward, float3 up, float3 right, float3 LightPosition)
{
	float3x3 rotation = {right.x, up.x, forward.x,
						 right.y, up.y, forward.y,
						 right.z, up.z, forward.z };

	return float4x4(rotation[0], 0,
					rotation[1], 0,
					rotation[2], 0,
					mul(-LightPosition, rotation), 1);
}

static float4x4 matLightProject = CreatePerspectiveProject(radians(45), 1, mPointLightNear, mPointLightFar);
static float4x4 matLightViewXP = CreateLightViewMatrix(float3(1,0,0), float3(0,1,0), float3(0,0,-1), LightPosition);
static float4x4 matLightViewXN = CreateLightViewMatrix(float3(-1,0,0), float3(0,1,0), float3(0,0,1), LightPosition);
static float4x4 matLightViewYP = CreateLightViewMatrix(float3(0,1,0), float3(0,0,-1), float3(1,0,0), LightPosition);
static float4x4 matLightViewYN = CreateLightViewMatrix(float3(0,-1,0), float3(0,0,1), float3(1,0,0), LightPosition);
static float4x4 matLightViewZP = CreateLightViewMatrix(float3(0,0,1), float3(0,1,0), float3(1,0,0), LightPosition);
static float4x4 matLightViewZN = CreateLightViewMatrix(float3(0,0,-1), float3(0,-1,0), float3(1,0,0), LightPosition);



int CubeMapFaceID(float3 dir)
{
    int faceID;

    if (abs(dir.z) >= abs(dir.x) && abs(dir.z) >= abs(dir.y))
    {
        faceID = (dir.z < 0.0) ? 5 : 4;
    }
    else if (abs(dir.y) >= abs(dir.x))
    {
        faceID = (dir.y < 0.0) ? 3 : 2;
    }
    else
    {
        faceID = (dir.x < 0.0) ? 1 : 0;
    }

    return faceID;
}

float ShadingShadow(MaterialParam material, float3 viewPosition)
{
	float3 P = mul(float4(viewPosition, 1), matViewInverse).xyz;
	float3 L = P - LightPosition;

	int face = CubeMapFaceID(L);

	float4 sts[] = {
		float4(0.5, 1.0/3, 0, 0),
		float4(0.5, 1.0/3, 0.5, 0),
		float4(0.5, 1.0/3, 0, 1.0/3),
		float4(0.5, 1.0/3, 0.5, 1.0/3),
		float4(0.5, 1.0/3, 0, 2.0/3),
		float4(0.5, 1.0/3, 0.5, 2.0/3)
	};

	static float4x4 viewMatrices[] = {
		matLightViewXP,
		matLightViewXN,
		matLightViewYP,
		matLightViewYN,
		matLightViewZP,
		matLightViewZN
	};

	float4 rects[] = {
		float4(0.0, 0, 0.5, 1.0/3),
		float4(0.5, 0, 0.5, 1.0/3),
		float4(0.0, 1.0/3, 0.5, 1.0/3),
		float4(0.5, 1.0/3, 0.5, 1.0/3),
		float4(0.0, 2.0/3, 0.5, 1.0/3),
		float4(0.5, 2.0/3, 0.5, 1.0/3),
	};
	float4 rect = rects[face];

	float4 st = sts[face];

	float3 P_VS = mul(float4(P, 1), viewMatrices[face]).xyz;
	float4 P_CS = mul(float4(P_VS, 1), matLightProject);
	float3 P_NDC = P_CS.xyz / P_CS.w;
	float2 P_Screen = P_NDC.xy * float2(0.5, -0.5) + 0.5;
	float2 coord = P_Screen * st.xy + st.zw;

	float depth = P_NDC.z;

	float2 shadow = 0.0;

	[unroll]
	for (int x = -sampleRadius; x <= sampleRadius; x++) 
	{
		[unroll]
		for (int y = -sampleRadius; y <= sampleRadius; y++)
		{
			float2 pos = coord + float2(x, y) * ShadowMapOffset2;
			pos.x = clamp(pos.x, rect.x + ShadowMapOffset.x * 3, rect.x + rect.z - ShadowMapOffset.x * 3);
			pos.y = clamp(pos.y, rect.y + ShadowMapOffset.y * 3, rect.y + rect.w - ShadowMapOffset.y * 3);
			shadow += tex2Dlod(ShadowMapSamp, float4(pos, 0, 0)).rg * sampleKernel[sampleRadius + x] * sampleKernel[sampleRadius + y];
		}
	}

	return ChebyshevUpperBound(shadow, depth, 1e-4, LightHardness);
}
#endif

void ShadingMaterial(MaterialParam material, float3 P, float3 V, float shadow, inout float3 diffuse, inout float3 specular)
{
	float3 L = viewLightPosition - P;
	float3 L2 = normalize(L);

	float3 atten = GetPhysicalLightAttenuation(L, LightRange, LightAttenuationBulb);
	atten *= LightColor;

	float2x3 energy = SurfaceEnergy(material, material.normal, L2, V, shadow);
	diffuse = energy[0] + SubsurfaceShading(material, material.normal, L2, V);
	diffuse *= atten;

#if LIGHT_PARAMS_TYPE == 0
	specular = energy[1];
	specular *= atten;
#endif
}

void GetGbufferParams(float4 texcoord, out MaterialParam material, out MaterialParam materialAlpha)
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, materialAlpha);

	clip(sum(materialAlpha.albedo + materialAlpha.specular) - 1e-5);

	float4 MRT1 = tex2Dlod(Gbuffer1Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer2Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord, 0, 0));

	DecodeGbuffer(MRT1, MRT2, MRT3, MRT4, material);
}

void UseLayer(float4 texcoord, inout float3 diffuse, inout float3 specular, inout float3 diffuseAlpha, inout float3 specularAlpha)
{
	float2 coord = texcoord.xy / texcoord.w;
	float mul = calculateLayer(LayerSamp, coord, mLayers);
	diffuse *= mul;
	specular *= mul;
	diffuseAlpha *= mul;
	specularAlpha *= mul;
}

void LightSourceVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	Position.xyz = LightPosition + Normal * LightRange;
	oTexcoord1 = -mul(Position, matView);
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
}

void LightSourcePS(
	float4 texcoord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(texcoord, material, materialAlpha);

	float3 V = normalize(viewdir);

	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float shadow = 1;
#if SHADOW_MAP_FROM > 0
	shadow = ShadingShadow(materialAlpha, P2);
	clip(shadow - 1e-5);
#endif

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, shadow, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, shadow, diffuseAlpha, specularAlpha);

	UseLayer(texcoord, diffuse, specular, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

void LightSourceShadowlessPS(
	float4 texcoord : TEXCOORD0, 
	float3 viewdir : TEXCOORD1,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	out float4 oColor2 : COLOR2)
{
	MaterialParam material;
	MaterialParam materialAlpha;
	GetGbufferParams(texcoord, material, materialAlpha);

	float3 V = normalize(viewdir);
	
	float3 P1 = V * material.linearDepth / V.z;
	float3 P2 = V * materialAlpha.linearDepth / V.z;

	float3 diffuse, specular = 0;
	ShadingMaterial(material, P1, V, 1, diffuse, specular);

	float3 diffuseAlpha, specularAlpha = 0;
	ShadingMaterial(materialAlpha, P2, V, 1, diffuseAlpha, specularAlpha);

	UseLayer(texcoord, diffuse, specular, diffuseAlpha, specularAlpha);

	oColor0 = float4(diffuse, 0);
	oColor1 = float4(specular, 0);
	oColor2 = float4(diffuseAlpha * materialAlpha.albedo + specularAlpha, 0);
}

technique MainTech0<string MMDPass = "object";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourceShadowlessPS();
	}
}

technique MainTechBS0<string MMDPass = "object_ss";
	string Script = 
		"RenderColorTarget0=;"
		"RenderColorTarget1=LightSpecMap;"
		"RenderColorTarget2=LightAlphaMap;"
		"Pass=DrawObject;"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 LightSourceVS();
		PixelShader  = compile ps_3_0 LightSourcePS();
	}
}

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}