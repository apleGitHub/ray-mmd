float3 noise3(float2 seed)
{
	return frac(sin(dot(seed.xy, float2(34.483, 89.637))) * float3(29156.4765, 38273.5639, 47843.7546));
}

float3 ColorBanding(float2 uv)
{
	float3 noise = noise3(uv) + noise3(uv + 0.5789) - 0.5;
	return noise / 255.0;
}

float3 ColorDithering(float3 color, float2 uv)
{
	color += ColorBanding(uv);
	return color;
}

float3 ColorVignette(float3 color, float2 coord)		
{		
	float L = length(coord * 2 - 1);		
	return color * smoothstep(mVignetteOuter - mVignette * 2, mVignetteInner - mVignette, L);		
}

float3 ColorTemperature(float3 color, float kelvin)
{
	float temp = kelvin / 100;
	float temp60 = max(0, temp - 60);
	float red = temp <= 66 ? 255 : 329.698727446 * pow(temp60, -0.1332047592);
	float green = temp <= 66 ? 99.4708025861 * log(temp) - 161.1195681661 : 288.1221695283 * pow(temp60, -0.0755148492);
	float blue = temp >= 66 ? 255 : (temp <= 19 ? 0 : 138.5177312231 * log(temp - 10) - 305.0447927307);
	float3 balance = saturate(float3(red, green, blue) / 255);
	return color * balance;
}

float3 ColorCorrect(
	float3 color,
	float colorSaturation,
	float colorContrast,
	float colorGamma,
	float3 colorGainP,
	float3 colorGainM)
{
	float3 lum = luminance(color);
	color = max(0, lerp(lum, color, colorSaturation));
	color = pow(color * (1.0 / 0.18), colorContrast) * 0.18;
	color = pow(color, colorGamma);
	color = color * (colorGainP + 1.0 - colorGainM);
	return color;
}

float3 ColorCorrect(
	float3 color,
	float3 colorSaturation,
	float3 colorContrast,
	float3 colorGamma,
	float3 colorGain,
	float3 colorOffset)
{
	float3 lum = luminance(color);
	color = max(0, lerp(lum, color, colorSaturation.rgb));
	color = pow(color * (1.0 / 0.18), colorContrast.rgb) * 0.18;
	color = pow(color, 1.0 / colorGamma.rgb);
	color = color * colorGain.rgb + colorOffset.rgb;
	return max(0, color);
}

float3 ColorCorrectAll(
	float3 color,
	float3 colorSaturation,
	float3 colorContrast,
	float3 colorGamma,
	float3 colorGain,
	float3 colorOffset,

	float3 colorSaturationShadows,
	float3 colorContrastShadows,
	float3 colorGammaShadows,
	float3 colorGainShadows,
	float3 colorOffsetShadows,

	float3 colorSaturationMidtones,
	float3 colorContrastMidtones,
	float3 colorGammaMidtones,
	float3 colorGainMidtones,
	float3 colorOffsetMidtones,

	float3 colorSaturationHighlights,
	float3 colorContrastHighlights,
	float3 colorGammaHighlights,
	float3 colorGainHighlights,
	float3 colorOffsetHighlights,

	float colorCorrectionShadowsMax,
	float colorCorrectionHighlightsMin)
{
	float3 colorShadows = ColorCorrect(color, 
		colorContrastShadows*colorContrast, 
		colorSaturationShadows*colorSaturation, 
		colorGammaShadows*colorGamma, 
		colorGainShadows*colorGain, 
		colorOffsetShadows+colorOffset);

	float3 colorHighlights = ColorCorrect(color, 
		colorContrastHighlights*colorContrast, 
		colorSaturationHighlights*colorSaturation, 
		colorGammaHighlights*colorGamma, 
		colorGainHighlights*colorGain, 
		colorOffsetHighlights+colorOffset);

	float3 colorMidtones = ColorCorrect(color, 
		colorContrastMidtones*colorContrast, 
		colorSaturationMidtones*colorSaturation, 
		colorGammaMidtones*colorGamma, 
		colorGainMidtones*colorGain, 
		colorOffsetMidtones+colorOffset);

	float weightLuma = luminance(color);
	float weightShadows = 1 - smoothstep(0, colorCorrectionShadowsMax, weightLuma);
	float weightHighlights = smoothstep(colorCorrectionHighlightsMin, 1, weightLuma);
	float weightMidtones = 1 - weightShadows - weightHighlights;

	colorShadows *= weightShadows;
	colorMidtones *= weightMidtones;
	colorHighlights *= weightHighlights;

	float3 blend = colorShadows + colorMidtones + colorHighlights;
	return blend;
}

float3 TonemapACES(float3 x)
{
	const float A = 2.51f;
	const float B = 0.03f;
	const float C = 2.43f;
	const float D = 0.59f;
	const float E = 0.14f;
	return (x * (A * x + B)) / (x * (C * x + D) + E);
}

float3 TonemapHejl2015(float3 hdr, float whitePt) 
{
	float4 vh = float4(hdr, whitePt);
	float4 va = 1.425 * vh + 0.05;
	float4 vf = (vh * va + 0.004) / (vh * (va + 0.55) + 0.0491) - 0.0821;
	return vf.rgb / vf.www;
}

float4 TonemapHable(float4 x) 
{
	float A = 0.22;
	float B = 0.30;
	float C = 0.10;
	float D = 0.20;
	float E = 0.01;
	float F = 0.30;
	return ((x*(A*x+C*B)+D*E) / (x*(A*x+B)+D*F)) - E / F;
}

float3 TonemapNaughtyDog(float3 x)
{		
	float A = -2586.3655;
	float B =  0.6900;
	float C = -767.6706;
	float D = -8.5706;
	float E =  2.8784;
	float F =  107.4683;
	return ((x*(A*x+C*B)+D*E) / (x*(A*x+B)+D*F)) - E / F;
}

float3 TonemapReinhardLumaBased(float3 color, float whitePt)
{
	float luma = luminance(color);
	float toneMappedLuma = luma * (1 + luma / (whitePt * whitePt))/ (1 + luma);
	color *= toneMappedLuma / luma;
	return color;
}

float3 TonemapDX11DSK(float3 color)
{
    float  MIDDLE_GRAY = 0.72f;
    float  LUM_WHITE = 1.5f;

    // Tone mapping
    color.rgb *= MIDDLE_GRAY;
    color.rgb *= (1.0f + color/LUM_WHITE);
    color.rgb /= (1.0f + color);
    
    return color;
}

float3 TonemapReinhardBasic(float3 x)
{
    return x/(1+x);
}

float3 TonemapReinhardJodie(float3 v)
{
    float l = luminance(v);
    float3 tv = v / (1.0f + v);
    return lerp(v / (1.0f + l), tv, tv);
}

float3 TonemapUnreal(float3 x) {
  return x / (x + 0.155) * 1.019;
}

float3 TonemapUnrealTuned(float3 x) {
  return x / (x + 0.187 * 2.2) * 1.035;
}

float3 uchimura(float3 x, float3 P, float3 a, float3 m, float3 l, float3 c, float3 b) {
  float3 l0 = ((P - m) * l) / a;
  float3 L0 = m - m / a;
  float3 L1 = m + (1.0 - m) / a;
  float3 S0 = m + l0;
  float3 S1 = m + a * l0;
  float3 C2 = (a * P) / (P - S1);
  float3 CP = -C2 / P;

  float3 w0 = 1.0 - smoothstep(0.0, m, x);
  float3 w2 = step(m + l0, x);
  float3 w1 = 1.0 - w0 - w2;

  float3 T = m * pow(x / m, c) + b;
  float3 S = P - (P - S1) * exp(CP * (x - S0));
  float3 L = m + a * (x - m);

  return T * w0 + L * w1 + S * w2;
}

float3 TonemapUchimura(float3 x) {
  const float3 P = 1.0;  // max display brightness
  const float3 a = 1.0;  // contrast
  const float3 m = 0.22; // linear section start
  const float3 l = 0.4;  // linear section length
  const float3 c = 1.33; // black
  const float3 b = 0.0;  // pedestal

  return uchimura(x, P, a, m, l, c, b);
}

float3 TonemapLottes(float3 x) {
  const float3 a = 1.6;
  const float3 d = 0.977;
  const float3 hdrMax = 8.0;
  const float3 midIn = 0.18;
  const float3 midOut = 0.267;

  const float3 b =
      (-pow(midIn, a) + pow(hdrMax, a) * midOut) /
      ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
  const float3 c =
      (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /
      ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);

  return pow(x, a) / (pow(x, a * d) * b + c);
}

float3 TonemapGrandTurismo(float3 x) {
	float3 m = 0.22; // linear section start
	float3 a = 1.0;  // contrast
	float3 c = 1.33; // black brightness
	float3 P = 1.0;  // maximum brightness
	float3 l = 0.4;  // linear section length
	float3 l0 = ((P-m)*l) / a; // 0.312
	float3 S0 = m + l0; // 0.532
	float3 S1 = m + a * l0; // 0.532
	float3 C2 = (a*P) / (P - S1); // 2.13675213675
	float3 L = m + a * (x - m);
	float3 T = m * pow(x/m, c);
	float3 S = P - (P - S1) * exp(-C2*(x - S0)/P);
	float3 w0 = 1 - smoothstep(0.0, m, x);
	float3 w2 = (x < m+l)?0:1;
	float3 w1 = 1 - w0 - w2;
	return float3(T * w0 + L * w1 + S * w2);
}

float3 TonemapFilmic(float3 x) {
  float3 X = max(0.0, x - 0.004);
  float3 result = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);
  return pow(result, 2.2);
}

float3 TonemapFilmicALU(in float3 color)
{
    color = max(0, color - 0.004f);
    color = (color * (6.2f * color + 0.5f)) / (color * (6.2f * color + 1.7f)+ 0.06f);
    return color;
}

float3 TonemapCalcLuminance(float3 color)
{
    return dot(color, float3(0.2126f, 0.7152f, 0.0722f));
}

float GetAvgLuminance(Texture2D lumTex)
{
    return lumTex.Load(uint3(0, 0, 0)).x;
}

float3 TonemapLinearTosRGB(in float3 color)
{
    float3 x = color * 12.92f;
    float3 y = 1.055f * pow(saturate(color), 1.0f / 2.4f) - 0.055f;

    float3 clr = color;
    clr.r = color.r < 0.0031308f ? x.r : y.r;
    clr.g = color.g < 0.0031308f ? x.g : y.g;
    clr.b = color.b < 0.0031308f ? x.b : y.b;

    return clr;
}

float3 TonemapSRGBToLinear(in float3 color)
{
    float3 x = color / 12.92f;
    float3 y = pow(max((color + 0.055f) / 1.055f, 0.0f), 2.4f);

    float3 clr = color;
    clr.r = color.r <= 0.04045f ? x.r : y.r;
    clr.g = color.g <= 0.04045f ? x.g : y.g;
    clr.b = color.b <= 0.04045f ? x.b : y.b;

    return clr;
}

float3 TonemapToCIE(float3 FullScreenImage)
	{

		float3x3 RGB2XYZ = {0.5141364, 0.3238786, 0.16036376, 0.265068, 0.67023428, 0.06409157, 0.0241188, 0.1228178, 0.84442666};
		 
		float3 XYZ = mul(RGB2XYZ, FullScreenImage.rgb); 

		float3 Yxy; 
		 
		Yxy.r = XYZ.g; 

		float temp = dot(float3(1.0,1.0,1.0), XYZ.rgb); 
		 
		Yxy.gb = XYZ.rg / temp;	
		
		return Yxy;	
	}		
	
float3 TonemapFromCIE(float3 Yxy)
	{	
		float3 XYZ;
		XYZ.r = Yxy.r * Yxy.g / Yxy. b; 
		 
		XYZ.g = Yxy.r;
		 
		XYZ.b = Yxy.r * (1 - Yxy.g - Yxy.b) / Yxy.b;
		 
 		float3x3 XYZ2RGB = { 2.5651,-1.1665,-0.3986, -1.0217, 1.9777, 0.0439, 0.0753, -0.2543, 1.1892};		

		return mul(XYZ2RGB, XYZ);
	}

float3 TonemapInverse(float3 sdr)
{
    return -log2(max(1e-6, 1 - sdr));
}
	
float3 ColorToneMapping(float3 color)
{
#if HDR_TONEMAP_OPERATOR == 1
	float3 curr = TonemapReinhardLumaBased(color, 4.0);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 2
	float4 curr = TonemapHable(float4(color * 2, 4.0));
	curr = curr / curr.w;
	return saturate(curr.rgb);
#elif HDR_TONEMAP_OPERATOR == 3
	float4 curr = TonemapHable(float4(color * 2, 8.0));
	curr = curr / curr.w;
	return saturate(curr.rgb);
#elif HDR_TONEMAP_OPERATOR == 4
	float3 curr = TonemapHejl2015(color, 4.0);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 5
	float3 curr = TonemapACES(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 6
	float3 curr = TonemapNaughtyDog(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 7
	float3 curr = TonemapDX11DSK(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 8
	float3 curr = TonemapReinhardBasic(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 9
	float3 curr = TonemapReinhardJodie(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 10
	float3 curr = TonemapUnreal(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 11
	float3 curr = TonemapUnrealTuned(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 12
	float3 curr = TonemapUchimura(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 13
	float3 curr = TonemapLottes(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 14
	float3 curr = TonemapGrandTurismo(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 15
	float3 curr = TonemapFilmic(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 16
	float3 curr = TonemapFilmicALU(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 17
	float3 curr = TonemapCalcLuminance(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 18
	float3 curr = TonemapLinearTosRGB(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 19
	float3 curr = TonemapSRGBToLinear(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 20
	float3 curr = TonemapToCIE(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 21
	float3 curr = TonemapFromCIE(color);
	return saturate(curr);
#elif HDR_TONEMAP_OPERATOR == 22
	float3 curr = TonemapInverse(color);
	return saturate(curr);
#else
	return saturate(color);
#endif
}