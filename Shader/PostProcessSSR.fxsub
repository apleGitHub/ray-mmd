#if SSR_QUALITY == 1
#	define SSR_HZB_LOOP_COUNT 64
#elif SSR_QUALITY == 2
#	define SSR_HZB_LOOP_COUNT 128
#elif SSR_QUALITY >= 3
#	define SSR_HZB_LOOP_COUNT 256
#else
#	define SSR_HZB_LOOP_COUNT 64
#endif

static const float2 SSRScale = mSSRBlur * float2(ViewportAspect, 1);

static const float2 SSROffsetX1 = float2(1 / SSRScale.x, 0.0);
static const float2 SSROffsetX2 = float2(2 / SSRScale.x, 0.0);
static const float2 SSROffsetX3 = float2(4 / SSRScale.x, 0.0);
static const float2 SSROffsetX4 = float2(8 / SSRScale.x, 0.0);

static const float2 SSROffsetY1 = float2(0.0, 1 / SSRScale.y);
static const float2 SSROffsetY2 = float2(0.0, 2 / SSRScale.y);
static const float2 SSROffsetY3 = float2(0.0, 4 / SSRScale.y);
static const float2 SSROffsetY4 = float2(0.0, 8 / SSRScale.y);

texture SSRLightX1Map : RENDERCOLORTARGET<float2 ViewportRatio = {1.0, 1.0}; string Format = "A8B8G8R8";>;
texture SSRLightX2Map : RENDERCOLORTARGET<float2 ViewportRatio = {0.5, 0.5}; string Format = "A8B8G8R8";>;
texture SSRLightX3Map : RENDERCOLORTARGET<float2 ViewportRatio = {0.25, 0.25}; string Format = "A8B8G8R8";>;
texture SSRLightX4Map : RENDERCOLORTARGET<float2 ViewportRatio = {0.125, 0.125}; string Format = "A8B8G8R8";>;
texture SSRLightX1MapTemp : RENDERCOLORTARGET<float2 ViewportRatio = {1.0, 1.0}; string Format = "A8B8G8R8";>;
texture SSRLightX2MapTemp : RENDERCOLORTARGET<float2 ViewportRatio = {0.5, 0.5}; string Format = "A8B8G8R8";>;
texture SSRLightX3MapTemp : RENDERCOLORTARGET<float2 ViewportRatio = {0.25, 0.25}; string Format = "A8B8G8R8";>;
texture SSRLightX4MapTemp : RENDERCOLORTARGET<float2 ViewportRatio = {0.125, 0.125}; string Format = "A8B8G8R8";>;

sampler SSRLightX1Samp = sampler_state { texture = <SSRLightX1Map>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX2Samp = sampler_state { texture = <SSRLightX2Map>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX3Samp = sampler_state { texture = <SSRLightX3Map>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX4Samp = sampler_state { texture = <SSRLightX4Map>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX1SampTemp = sampler_state { texture = <SSRLightX1MapTemp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX2SampTemp = sampler_state { texture = <SSRLightX2MapTemp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX3SampTemp = sampler_state { texture = <SSRLightX3MapTemp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};
sampler SSRLightX4SampTemp = sampler_state { texture = <SSRLightX4MapTemp>; MinFilter = LINEAR; MagFilter = LINEAR; AddressU = CLAMP; AddressV = CLAMP; MipFilter = NONE;};

float4 SSRConeTracingPS(in float4 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : COLOR 
{
	float4 MRT0 = tex2Dlod(Gbuffer5Map, float4(coord.xy, 0, 0));
	float4 MRT1 = tex2Dlod(Gbuffer6Map, float4(coord.xy, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer7Map, float4(coord.xy, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer8Map, float4(coord.xy, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);

	float3 test = material.albedo + material.specular;
	clip(sum(test) - 1e-5);

	float3 view = normalize(viewdir);
	float3 viewPosition = view * material.linearDepth / view.z;
	float3 viewReflect = normalize(reflect(-view, material.normal));

	float atten = dot(viewReflect, -view);
	clip(atten - 1e-5);

	float sampleJitter = PseudoRandom(coord.zw);
	float sampleDistance = mSSRRangeScale;
	sampleDistance *= max(0, mSSRRangeMax - material.linearDepth) +  material.linearDepth;
	sampleDistance *= pow(1 - saturate(dot(view, material.normal)) * (1 - SSR_QUALITY * 0.1), 5 - SSR_QUALITY);

	float2 hitPixel = 0;
	float3 ott = float3(mSSROffset * (1 - saturate(dot(view, material.normal))), mSSRThickness, 0);
	bool hitTest = HZTrace(SSR_HZB_LOOP_COUNT, viewPosition, viewReflect, sampleDistance, ott, hitPixel);
	if (!hitTest)
		clip(-1);

	float2 boundary = abs(coord.xy * 2 - 1);
	float fadeDiffRcp = 1.0f / max(0.01, 1 - mSSRFadeStart);
	float fadeOnBorder = 1.0f - saturate((boundary.x - mSSRFadeStart) * fadeDiffRcp);
	fadeOnBorder *= 1.0f - saturate((boundary.y - mSSRFadeStart) * fadeDiffRcp);
	fadeOnBorder = smoothstep(0.0f, 1.0f, fadeOnBorder);

	float fadeOnPerpendicular = saturate(atten);
	float fadeOnTotal = fadeOnBorder * fadeOnPerpendicular;

	float4 totalColor = tex2Dlod(ShadingMapPointSamp, float4(hitPixel, 0, 0));
	return float4(totalColor.rgb, 1) * fadeOnTotal;
}

float4 SSRGaussionBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	static const float weights[5] = {0.20236, 0.179044, 0.124009, 0.067234, 0.028532};

	float2 start = coord - offset * 4;

	float4 color = 0;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[4]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[3]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[2]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[1]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[0]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[1]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[2]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[3]; start += offset;
	color += tex2Dlod(source, float4(start, 0, 0)) * weights[4];

	return color;
}

float4 SSRFinalCombiePS(in float2 coord : TEXCOORD0, in float3 viewdir : TEXCOORD1) : COLOR
{
	float4 MRT0 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT1 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT2 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT3 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT0, MRT1, MRT2, MRT3, material);

	float gloss = material.smoothness;
	gloss += mSSRSmoothness;
	gloss = saturate(gloss);
	float gloss2 = gloss * gloss;

	float weight = frac(min(gloss2, 0.9999) * 3);

	float4 refl0 = tex2Dlod(SSRLightX1Samp, float4(coord, 0, 0));
	float4 refl1 = tex2Dlod(SSRLightX2Samp, float4(coord, 0, 0));
	float4 refl2 = tex2Dlod(SSRLightX3Samp, float4(coord, 0, 0));
	float4 refl3 = tex2Dlod(SSRLightX4Samp, float4(coord, 0, 0));

	float4 color = 0;

	[branch]
	if (gloss2 > 2.0 / 3.0)
		color = lerp(refl1, refl0, weight * weight);
	else if (gloss2 > 1.0 / 3.0)
		color = lerp(refl2, refl1, weight);
	else
		color = lerp(refl3, refl2, weight);

	float3 N = material.normal;
	float3 V = normalize(viewdir);
	float3 f0 = material.specular;
	float3 fresnelColor = EnvironmentSpecularUnreal4(abs(dot(N, V)), gloss, f0);

	float brightness = mSSRBrightness;
	float fresnel = lerp(0, luminance(fresnelColor), saturate(mSSRFresnel * 2));
	fresnel = lerp(fresnel, 1, saturate(mSSRFresnel * 2 - 1));

	return float4(color.rgb * fresnelColor * brightness, color.a * fresnel) 
	* calculateLayer(LayerSamp, coord, mSSRLayers);
}